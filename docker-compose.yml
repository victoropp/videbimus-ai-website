version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: vidibemus-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: vidibemus_ai
      POSTGRES_USER: vidibemus
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD:-secure_password_change_in_production}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5432:5432"
    networks:
      - vidibemus-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U vidibemus -d vidibemus_ai"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: vidibemus-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis_password_change_in_production}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - vidibemus-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Next.js Application (Development)
  app-dev:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: vidibemus-app-dev
    restart: unless-stopped
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://vidibemus:${DATABASE_PASSWORD:-secure_password_change_in_production}@postgres:5432/vidibemus_ai
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_password_change_in_production}@redis:6379
      - NEXTAUTH_URL=http://localhost:3000
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET:-development_secret_change_in_production}
    volumes:
      - .:/app
      - /app/node_modules
      - /app/.next
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - vidibemus-network
    command: npm run dev
    profiles:
      - development

  # Next.js Application (Production)
  app:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - DATABASE_URL=postgresql://vidibemus:${DATABASE_PASSWORD:-secure_password_change_in_production}@postgres:5432/vidibemus_ai
        - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
        - NEXTAUTH_URL=${NEXTAUTH_URL}
    container_name: vidibemus-app
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://vidibemus:${DATABASE_PASSWORD:-secure_password_change_in_production}@postgres:5432/vidibemus_ai
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_password_change_in_production}@redis:6379
      - NEXTAUTH_URL=${NEXTAUTH_URL}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - vidibemus-network
    profiles:
      - production

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: vidibemus-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - app
    networks:
      - vidibemus-network
    profiles:
      - production

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: vidibemus-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - vidibemus-network
    profiles:
      - monitoring

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: vidibemus-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin_password_change_in_production}
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - vidibemus-network
    profiles:
      - monitoring

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  vidibemus-network:
    driver: bridge