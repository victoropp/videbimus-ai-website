// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// User management
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole        @default(CLIENT)
  isActive      Boolean         @default(true)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  lastLoginAt   DateTime?

  // Relations
  accounts      Account[]
  sessions      Session[]
  projects      Project[]
  consultations Consultation[]
  blogPosts     BlogPost[]
  analytics     Analytics[]
  newsletters   Newsletter[]
  contacts      Contact[]
  
  // Consultation room relations
  clientRooms              ConsultationRoom[]          @relation("ClientRooms")
  consultantRooms          ConsultationRoom[]          @relation("ConsultantRooms")
  sentMessages             ConsultationMessage[]       @relation("SentMessages")
  uploadedDocuments        ConsultationDocument[]      @relation("UploadedDocuments")
  updatedWhiteboards       ConsultationWhiteboard[]    @relation("UpdatedWhiteboards")
  assignedActionItems      ConsultationActionItem[]    @relation("AssignedActionItems")
  createdActionItems       ConsultationActionItem[]    @relation("CreatedActionItems")
  consultationParticipation ConsultationParticipant[]  @relation("ConsultationParticipation")
  
  // Content and business relations
  caseStudies         CaseStudyEntry[]
  invoices            Invoice[]
  activities          UserActivity[]
  uploads             FileUpload[]
  backups             DataBackup[]
  apiKeys             APIKey[]
  
  // New blog relations
  blogComments        BlogComment[]
  blogRevisions       BlogRevision[]
  documentVersions    DocumentVersion[]
  
  // Collaboration relations
  presence            UserPresence?
  notifications       Notification[]

  // Payment system relations
  customer            Customer?     @relation("CustomerToUser")
  payments            Payment[]
  refunds             Refund[]
  usageLogs           UsageLog[]

  // Auth relations
  passwordResetTokens PasswordResetToken[] @relation("PasswordResetTokens")

  @@map("users")
}

enum UserRole {
  ADMIN
  CLIENT
  CONSULTANT
  GUEST
}

// Project management
model Project {
  id          String        @id @default(cuid())
  title       String
  description String?
  status      ProjectStatus @default(PLANNING)
  priority    Priority      @default(MEDIUM)
  budget      Decimal?
  startDate   DateTime?
  endDate     DateTime?
  userId      String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  consultations Consultation[]
  files         ProjectFile[]
  tasks         Task[]
  invoices      Invoice[]

  @@index([userId, status])
  @@index([status, createdAt])
  @@map("projects")
}

enum ProjectStatus {
  PLANNING
  IN_PROGRESS
  REVIEW
  COMPLETED
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

// Consultation management
model Consultation {
  id          String            @id @default(cuid())
  title       String
  description String?
  status      ConsultationStatus @default(SCHEDULED)
  type        ConsultationType
  duration    Int?              // Duration in minutes
  scheduledAt DateTime?
  completedAt DateTime?
  notes       String?
  userId      String
  projectId   String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  // Relations
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project? @relation(fields: [projectId], references: [id], onDelete: SetNull)
  files   ConsultationFile[]
  room    ConsultationRoom? // One-to-one with consultation room

  @@index([userId, status])
  @@index([status, scheduledAt])
  @@map("consultations")
}

// Enhanced consultation room for collaboration features
model ConsultationRoom {
  id            String            @id @default(cuid())
  name          String
  description   String?
  roomType      String            @default("consultation") // consultation, training, review
  
  // Participants
  clientId      String
  consultantId  String
  
  // Scheduling
  scheduledAt   DateTime?
  durationMinutes Int?            @default(60)
  
  // Status management
  status        ConsultationRoomStatus @default(SCHEDULED)

  // Settings and configuration (Json used for flexible room-specific settings like video quality, recording preferences, etc.)
  settings      Json              @default("{}")
  
  // Optional consultation link
  consultationId String?          @unique
  
  // Timestamps
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  completedAt   DateTime?
  
  // Relations
  client        User              @relation("ClientRooms", fields: [clientId], references: [id], onDelete: Cascade)
  consultant    User              @relation("ConsultantRooms", fields: [consultantId], references: [id], onDelete: Cascade)
  consultation  Consultation?     @relation(fields: [consultationId], references: [id], onDelete: SetNull)
  messages      ConsultationMessage[]
  documents     ConsultationDocument[]
  whiteboards   ConsultationWhiteboard[]
  actionItems   ConsultationActionItem[]
  participants  ConsultationParticipant[]
  analytics     ConsultationAnalytics?
  
  @@index([clientId])
  @@index([consultantId])
  @@index([status])
  @@index([scheduledAt])
  @@map("consultation_rooms")
}

enum ConsultationRoomStatus {
  SCHEDULED
  ACTIVE
  COMPLETED
  CANCELLED
}

// Chat messages for consultation rooms
model ConsultationMessage {
  id          String   @id @default(cuid())
  roomId      String
  senderId    String
  content     String
  messageType String   @default("text") // text, file, system, action_item
  metadata    Json     @default("{}") // Flexible metadata for file attachments, action item references, etc.

  // Status tracking
  isEdited    Boolean  @default(false)
  editedAt    DateTime?
  isDeleted   Boolean  @default(false)
  deletedAt   DateTime?

  createdAt   DateTime @default(now())

  // Relations
  room        ConsultationRoom @relation(fields: [roomId], references: [id], onDelete: Cascade)
  sender      User             @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)

  @@index([roomId])
  @@index([senderId])
  @@index([createdAt])
  @@index([messageType])
  @@index([roomId, createdAt])
  @@index([senderId, createdAt])
  @@map("consultation_messages")
}

// Documents and files for consultation rooms
model ConsultationDocument {
  id           String   @id @default(cuid())
  roomId       String
  title        String
  description  String?
  documentType String   @default("document") // document, template, attachment
  
  // Content
  content      String?  // For text documents
  filePath     String?  // For uploaded files
  fileName     String?
  fileSize     Int?
  mimeType     String?
  
  // Access control
  uploadedBy   String?
  isTemplate   Boolean  @default(false)
  isShared     Boolean  @default(true)
  
  // Version control fields
  version      Int      @default(1)
  isLocked     Boolean  @default(false)
  lockedBy     String?
  lockedAt     DateTime?
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relations
  room         ConsultationRoom @relation(fields: [roomId], references: [id], onDelete: Cascade)
  uploader     User?            @relation("UploadedDocuments", fields: [uploadedBy], references: [id], onDelete: SetNull)
  versions     DocumentVersion[]
  
  @@index([roomId])
  @@index([documentType])
  @@index([uploadedBy])
  @@index([isTemplate])
  @@map("consultation_documents")
}

// Whiteboard data for consultation rooms
model ConsultationWhiteboard {
  id              String   @id @default(cuid())
  roomId          String
  canvasData      Json     // Fabric.js or Excalidraw JSON
  thumbnailUrl    String?
  
  // Versioning
  version         Int      @default(1)
  parentVersionId String?
  
  // Metadata
  title           String   @default("Whiteboard")
  updatedBy       String?
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  room            ConsultationRoom @relation(fields: [roomId], references: [id], onDelete: Cascade)
  updater         User?            @relation("UpdatedWhiteboards", fields: [updatedBy], references: [id], onDelete: SetNull)
  parentVersion   ConsultationWhiteboard? @relation("WhiteboardVersions", fields: [parentVersionId], references: [id])
  childVersions   ConsultationWhiteboard[] @relation("WhiteboardVersions")
  
  @@index([roomId])
  @@index([updatedBy])
  @@index([version])
  @@map("consultation_whiteboards")
}

// Action items and follow-ups for consultation rooms
model ConsultationActionItem {
  id              String   @id @default(cuid())
  roomId          String
  title           String
  description     String?
  priority        String   @default("medium") // low, medium, high, urgent
  
  // Assignment
  assignedTo      String?
  createdBy       String?
  
  // Status tracking
  status          String   @default("pending") // pending, in_progress, completed, cancelled
  dueDate         DateTime?
  
  // Completion
  completedAt     DateTime?
  completionNotes String?
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  room            ConsultationRoom @relation(fields: [roomId], references: [id], onDelete: Cascade)
  assignee        User?            @relation("AssignedActionItems", fields: [assignedTo], references: [id], onDelete: SetNull)
  creator         User?            @relation("CreatedActionItems", fields: [createdBy], references: [id], onDelete: SetNull)
  
  @@index([roomId])
  @@index([assignedTo])
  @@index([status])
  @@index([dueDate])
  @@map("consultation_action_items")
}

// Room participants for group consultations
model ConsultationParticipant {
  id              String   @id @default(cuid())
  roomId          String
  userId          String
  
  // Role and permissions
  role            String   @default("participant") // host, consultant, client, participant, observer
  permissions     Json     @default("{\"canEdit\": false, \"canShare\": false}") // Granular permissions for room features
  
  // Participation tracking
  joinedAt        DateTime @default(now())
  leftAt          DateTime?
  isActive        Boolean  @default(true)
  
  // Activity metrics
  totalTimeMinutes Int     @default(0)
  messagesSent     Int     @default(0)
  documentsViewed  Int     @default(0)
  
  // Relations
  room            ConsultationRoom @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user            User             @relation("ConsultationParticipation", fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([roomId, userId])
  @@index([roomId])
  @@index([userId])
  @@index([role])
  @@map("consultation_participants")
}

// Session analytics for consultation rooms
model ConsultationAnalytics {
  id                      String   @id @default(cuid())
  roomId                  String   @unique
  
  // Session metrics
  actualDurationMinutes   Int?
  participantCount        Int?
  messagesCount           Int?
  documentsShared         Int?
  actionItemsCreated      Int?
  
  // Engagement metrics
  avgResponseTimeSeconds  Int?
  toolUsage               Json?    // Usage time per tool (chat, whiteboard, documents, etc.)
  clientSatisfactionScore Float?   // 1.00 to 5.00
  
  // Technical metrics
  connectionIssues        Int      @default(0)
  featureErrors           Int      @default(0)
  
  // Business metrics
  followUpScheduled       Boolean  @default(false)
  projectProposed         Boolean  @default(false)
  contractSigned          Boolean  @default(false)
  projectValue            Float?
  
  recordedAt              DateTime @default(now())
  
  // Relations
  room                    ConsultationRoom @relation(fields: [roomId], references: [id], onDelete: Cascade)
  
  @@index([recordedAt])
  @@map("consultation_analytics")
}

enum ConsultationStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  RESCHEDULED
}

enum ConsultationType {
  DISCOVERY
  STRATEGY
  TECHNICAL
  REVIEW
  TRAINING
  FOLLOW_UP
}

// Task management
model Task {
  id          String     @id @default(cuid())
  title       String
  description String?
  status      TaskStatus @default(TODO)
  priority    Priority   @default(MEDIUM)
  dueDate     DateTime?
  completedAt DateTime?
  projectId   String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("tasks")
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  REVIEW
  COMPLETED
  CANCELLED
}

// File management
model ProjectFile {
  id        String   @id @default(cuid())
  filename  String
  originalName String
  mimeType  String
  size      Int
  url       String
  projectId String
  createdAt DateTime @default(now())

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId, createdAt])
  @@map("project_files")
}

model ConsultationFile {
  id             String   @id @default(cuid())
  filename       String
  originalName   String
  mimeType       String
  size           Int
  url            String
  consultationId String
  createdAt      DateTime @default(now())

  // Relations
  consultation Consultation @relation(fields: [consultationId], references: [id], onDelete: Cascade)

  @@index([consultationId, createdAt])
  @@map("consultation_files")
}

// Contact form submissions
model Contact {
  id          String        @id @default(cuid())
  name        String
  email       String
  company     String?
  phone       String?
  subject     String
  message     String
  status      ContactStatus @default(NEW)
  priority    Priority      @default(MEDIUM)
  userId      String?       // Optional - if user is logged in
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  respondedAt DateTime?

  // Relations
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("contacts")
}

enum ContactStatus {
  NEW
  IN_PROGRESS
  RESPONDED
  CLOSED
  SPAM
}

// Newsletter subscriptions
model Newsletter {
  id          String            @id @default(cuid())
  email       String            @unique
  status      NewsletterStatus  @default(SUBSCRIBED)
  userId      String?           // Optional - if user is logged in
  preferences Json?             // Store subscription preferences
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  // Relations
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("newsletters")
}

enum NewsletterStatus {
  SUBSCRIBED
  UNSUBSCRIBED
  BOUNCED
  COMPLAINED
}

// Blog and content management
model BlogPost {
  id          String      @id @default(cuid())
  title       String
  slug        String      @unique
  excerpt     String?
  content     String
  status      PostStatus  @default(DRAFT)
  published   Boolean     @default(false)
  publishedAt DateTime?
  featured    Boolean     @default(false)
  featuredImage String?   // Add optional featured image URL
  authorId    String
  categoryId  String?
  tags        String[]
  seoTitle    String?
  seoDescription String?
  readTime    Int?        // Estimated read time in minutes
  views       Int         @default(0)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  author   User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  category Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)

  // New blog relations
  postTags     BlogPostTag[]
  comments     BlogComment[]
  images       BlogImage[]
  revisions    BlogRevision[]

  @@index([published, createdAt])
  @@index([authorId, published])
  @@index([status, createdAt])
  @@index([featured, published])
  @@map("blog_posts")
}

enum PostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model Category {
  id          String     @id @default(cuid())
  name        String     @unique
  slug        String     @unique
  description String?
  color       String?
  isActive    Boolean    @default(true)
  orderIndex  Int        @default(0)
  parentId    String?    // For hierarchical categories
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  blogPosts BlogPost[]
  parent    Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children  Category[] @relation("CategoryHierarchy")

  @@index([isActive, orderIndex])
  @@map("categories")
}

// Analytics and tracking
model Analytics {
  id          String      @id @default(cuid())
  userId      String?     // Optional - for logged in users
  sessionId   String?     // Session tracking
  event       String      // Event name (page_view, click, form_submit, etc.)
  page        String?     // Page URL
  referrer    String?     // Referrer URL
  userAgent   String?     // User agent string
  ipAddress   String?     // IP address (for geo tracking)
  country     String?     // Country code
  city        String?     // City name
  device      String?     // Device type (mobile, desktop, tablet)
  browser     String?     // Browser name
  os          String?     // Operating system
  properties  Json?       // Additional event properties
  createdAt   DateTime    @default(now())

  // Relations
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([event])
  @@index([userId])
  @@index([createdAt])
  @@map("analytics")
}

// Content Management Models
model TeamMember {
  id          String   @id @default(cuid())
  name        String
  role        String
  bio         String?
  image       String?
  email       String?  @unique
  linkedin    String?
  twitter     String?
  github      String?
  isActive    Boolean  @default(true)
  sortOrder   Int      @default(0)
  skills      String[] // Array of skills
  experience  Int?     // Years of experience
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("team_members")
}

model Testimonial {
  id        String   @id @default(cuid())
  name      String
  role      String
  company   String
  content   String
  image     String?
  rating    Int      @default(5)
  isActive  Boolean  @default(true)
  sortOrder Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("testimonials")
}

model CaseStudyEntry {
  id          String               @id @default(cuid())
  title       String
  description String
  client      String
  industry    String
  image       String?
  slug        String               @unique
  tags        String[]
  results     Json                 // Array of {metric: string, value: string}
  content     String?              // Full case study content
  status      CaseStudyStatus      @default(DRAFT)
  featured    Boolean              @default(false)
  sortOrder   Int                  @default(0)
  seoTitle    String?
  seoDescription String?
  publishedAt DateTime?
  authorId    String?
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt

  // Relations
  author      User?                @relation(fields: [authorId], references: [id], onDelete: SetNull)
  files       CaseStudyFile[]

  @@map("case_studies")
}

enum CaseStudyStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model CaseStudyFile {
  id           String         @id @default(cuid())
  filename     String
  originalName String
  mimeType     String
  size         Int
  url          String
  description  String?
  caseStudyId  String
  createdAt    DateTime       @default(now())

  // Relations
  caseStudy    CaseStudyEntry @relation(fields: [caseStudyId], references: [id], onDelete: Cascade)

  @@map("case_study_files")
}

// Financial Models
model Invoice {
  id                 String         @id @default(cuid())
  customerId         String?
  subscriptionId     String?
  stripeInvoiceId    String?        @unique
  number             String         @unique
  amount             Decimal
  subtotal           Decimal?
  tax                Decimal?
  total              Decimal
  currency           String         @default("USD")
  status             InvoiceStatus  @default(DRAFT)
  issuedDate         DateTime?
  dueDate            DateTime?
  paidDate           DateTime?
  description        String?
  notes              String?
  projectId          String?
  clientId           String?
  amountDue          Int?
  amountRemaining    Int?
  hostedInvoiceUrl   String?
  invoicePdf         String?
  periodStart        DateTime?
  periodEnd          DateTime?
  metadata           Json           @default("{}")
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt

  // Relations
  client             User?          @relation(fields: [clientId], references: [id], onDelete: Cascade)
  subscription       Subscription?  @relation("SubscriptionInvoices", fields: [subscriptionId], references: [id], onDelete: SetNull)
  project            Project?       @relation(fields: [projectId], references: [id], onDelete: SetNull)
  items              InvoiceItem[]
  payments           Payment[]

  @@index([customerId])
  @@index([subscriptionId])
  @@index([stripeInvoiceId])
  @@map("invoices")
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  OVERDUE
  CANCELLED
  REFUNDED
}

model InvoiceItem {
  id          String   @id @default(cuid())
  description String
  quantity    Decimal  @default(1)
  rate        Decimal
  unitAmount  Int?
  amount      Decimal
  currency    String   @default("USD")
  invoiceId   String
  createdAt   DateTime @default(now())

  // Relations
  invoice     Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@map("invoice_items")
}

model Payment {
  id                     String         @id @default(cuid())
  userId                 String
  customerId             String?
  stripePaymentIntentId  String?        @unique
  amount                 Decimal
  currency               String         @default("USD")
  status                 PaymentStatus  @default(PENDING)
  method                 PaymentMethod  @default(STRIPE)
  paymentMethodId        String?
  transactionId          String?        @unique
  reference              String?
  description            String?
  receiptEmail           String?
  amountReceived         Int?
  failureCode            String?
  failureMessage         String?
  notes                  String?
  processedAt            DateTime?
  invoiceId              String?
  metadata               Json           @default("{}")
  createdAt              DateTime       @default(now())
  updatedAt              DateTime       @updatedAt

  // Relations
  user                   User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  customer               Customer?      @relation("CustomerPayments", fields: [customerId], references: [id], onDelete: SetNull)
  paymentMethod          StripePaymentMethod? @relation("PaymentMethodPayments", fields: [paymentMethodId], references: [id], onDelete: SetNull)
  invoice                Invoice?       @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  refunds                Refund[]

  @@index([userId])
  @@index([customerId])
  @@index([stripePaymentIntentId])
  @@map("payments")
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}

enum PaymentMethod {
  CREDIT_CARD
  BANK_TRANSFER
  PAYPAL
  STRIPE
  WIRE_TRANSFER
  CHECK
  CASH
  CARD
  BANK_ACCOUNT
  SEPA_DEBIT
}

// Metrics and Analytics Models
model PerformanceMetric {
  id        String            @id @default(cuid())
  name      String
  value     Json              // Flexible value storage
  type      MetricType
  category  String
  unit      String?
  timestamp DateTime          @default(now())
  metadata  Json?             // Additional metric data
  createdAt DateTime          @default(now())

  @@index([name, timestamp])
  @@map("performance_metrics")
}

enum MetricType {
  COUNTER
  GAUGE
  HISTOGRAM
  SUMMARY
  RATE
}

model SystemHealth {
  id          String   @id @default(cuid())
  service     String   @unique // Service name (api, database, redis, etc.)
  status      String   // healthy, degraded, down
  responseTime Int?    // Response time in ms
  uptime      Float?   // Uptime percentage
  lastCheck   DateTime @default(now())
  metadata    Json?    // Additional health data
  createdAt   DateTime @default(now())

  @@index([service, lastCheck])
  @@map("system_health")
}

// User Engagement Models
model UserActivity {
  id         String   @id @default(cuid())
  userId     String?
  sessionId  String?
  action     String   // Action taken
  resource   String?  // Resource accessed
  metadata   Json?    // Additional activity data
  ipAddress  String?
  userAgent  String?
  timestamp  DateTime @default(now())

  // Relations
  user       User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId, timestamp])
  @@index([action, timestamp])
  @@map("user_activities")
}

// File Storage Models
model FileUpload {
  id          String     @id @default(cuid())
  filename    String
  originalName String
  mimeType    String
  size        Int
  url         String     // Cloud storage URL
  bucket      String?    // S3 bucket or storage container
  key         String?    // Storage key/path
  uploadedBy  String
  metadata    Json?      // Additional file metadata
  isPublic    Boolean    @default(false)
  tags        String[]   // File tags for organization
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  uploader    User       @relation(fields: [uploadedBy], references: [id], onDelete: Cascade)

  @@index([uploadedBy])
  @@index([mimeType])
  @@map("file_uploads")
}

// Backup and Recovery Models
model DataBackup {
  id          String       @id @default(cuid())
  name        String
  type        BackupType
  status      BackupStatus @default(PENDING)
  size        Int?         // Backup size in bytes
  location    String?      // Backup storage location
  checksum    String?      // File integrity checksum
  startedAt   DateTime     @default(now())
  completedAt DateTime?
  errorMessage String?
  metadata    Json?
  createdBy   String?
  createdAt   DateTime     @default(now())

  // Relations
  creator     User?        @relation(fields: [createdBy], references: [id], onDelete: SetNull)

  @@map("data_backups")
}

enum BackupType {
  FULL
  INCREMENTAL
  DIFFERENTIAL
  MANUAL
}

enum BackupStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
  CANCELLED
}

// Cache Management Models
model CacheEntry {
  id        String   @id @default(cuid())
  key       String   @unique
  value     Json     // Cached data
  tags      String[] // Cache tags for invalidation
  expiresAt DateTime?
  hitCount  Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([expiresAt])
  @@index([tags])
  @@map("cache_entries")
}

// API and Integration Models
model APIKey {
  id          String     @id @default(cuid())
  name        String
  key         String     @unique
  secret      String?
  permissions String[]   // Array of permissions
  isActive    Boolean    @default(true)
  lastUsed    DateTime?
  expiresAt   DateTime?
  createdBy   String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  creator     User       @relation(fields: [createdBy], references: [id], onDelete: Cascade)

  @@map("api_keys")
}

// System settings and configuration
model Setting {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  category  String   @default("general")
  isPublic  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("settings")
}

// Rate limiting for API protection
model RateLimit {
  id        String   @id @default(cuid())
  identifier String  // IP address or user ID
  key       String   // API endpoint or action
  requests  Int      @default(1)
  windowStart DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([identifier, key])
  @@index([windowStart])
  @@map("rate_limits")
}
// ============================================
// BLOG ENHANCEMENT MODELS - Added for full functionality
// ============================================

// Blog tags as separate entities (migrating from String[] in BlogPost)
model BlogTag {
  id          String      @id @default(cuid())
  name        String      @unique
  slug        String      @unique
  description String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  posts       BlogPostTag[]
  
  @@map("blog_tags")
}

// Junction table for BlogPost <-> BlogTag many-to-many
model BlogPostTag {
  postId    String
  tagId     String
  createdAt DateTime @default(now())
  
  post      BlogPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag       BlogTag  @relation(fields: [tagId], references: [id], onDelete: Cascade)
  
  @@id([postId, tagId])
  @@map("blog_post_tags")
}

// Blog comments system
model BlogComment {
  id          String        @id @default(cuid())
  content     String
  isApproved  Boolean       @default(false)
  authorId    String
  postId      String
  parentId    String?       // For nested comments
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  author      User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post        BlogPost      @relation(fields: [postId], references: [id], onDelete: Cascade)
  parent      BlogComment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies     BlogComment[] @relation("CommentReplies")
  
  @@map("blog_comments")
}

// Blog images management
model BlogImage {
  id          String      @id @default(cuid())
  url         String
  alt         String?
  caption     String?
  postId      String
  order       Int         @default(0)
  createdAt   DateTime    @default(now())
  
  post        BlogPost    @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  @@map("blog_images")
}

// Blog revision history
model BlogRevision {
  id          String      @id @default(cuid())
  title       String
  excerpt     String?
  content     String
  version     Int
  changeNote  String?
  authorId    String
  blogPostId  String
  createdAt   DateTime    @default(now())
  
  author      User        @relation(fields: [authorId], references: [id])
  blogPost    BlogPost    @relation(fields: [blogPostId], references: [id], onDelete: Cascade)
  
  @@map("blog_revisions")
}

// Document versioning system
model DocumentVersion {
  id          String                @id @default(cuid())
  documentId  String
  content     String?
  version     Int
  changeNote  String?
  createdBy   String
  createdAt   DateTime              @default(now())
  
  document    ConsultationDocument  @relation(fields: [documentId], references: [id], onDelete: Cascade)
  creator     User                  @relation(fields: [createdBy], references: [id])
  
  @@map("document_versions")
}

// User presence tracking for collaboration
model UserPresence {
  id         String    @id @default(cuid())
  userId     String    @unique
  isOnline   Boolean   @default(false)
  roomId     String?
  lastSeen   DateTime  @default(now())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  
  // Relations
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([isOnline])
  @@index([roomId])
  @@map("user_presence")
}

// Notifications system
model Notification {
  id         String            @id @default(cuid())
  userId     String
  title      String
  content    String
  type       NotificationType  @default(SYSTEM)
  isRead     Boolean           @default(false)
  metadata   Json?
  createdAt  DateTime          @default(now())
  readAt     DateTime?
  
  // Relations
  user       User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([isRead])
  @@index([createdAt])
  @@map("notifications")
}

enum NotificationType {
  SYSTEM
  MESSAGE
  DOCUMENT
  WHITEBOARD
  ROOM
  ACTION_ITEM
}

// ============================================
// Payment System Models (Stripe Integration)
// ============================================

model Customer {
  id                String    @id @default(cuid())
  userId            String    @unique
  stripeCustomerId  String    @unique
  email             String
  name              String?
  phone             String?
  defaultPaymentMethodId String?
  metadata          Json      @default("{}")
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  user              User      @relation("CustomerToUser", fields: [userId], references: [id], onDelete: Cascade)
  subscriptions     Subscription[]
  paymentMethods    StripePaymentMethod[]
  payments          Payment[] @relation("CustomerPayments")
  billingAddress    BillingAddress?
  credits           Credit[]

  @@index([userId])
  @@index([stripeCustomerId])
  @@map("customers")
}

model StripePaymentMethod {
  id              String   @id @default(cuid())
  customerId      String
  stripePaymentMethodId String @unique
  type            PaymentMethod_Type

  // Card details
  cardBrand       String?
  cardLast4       String?
  cardExpMonth    Int?
  cardExpYear     Int?

  // Bank account details
  bankName        String?
  bankLast4       String?

  // Legacy fields (for backwards compatibility)
  last4           String?
  brand           String?
  expiryMonth     Int?
  expiryYear      Int?

  isDefault       Boolean  @default(false)
  isActive        Boolean  @default(true)
  billingDetails  Json     @default("{}")
  metadata        Json     @default("{}")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  customer        Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  payments        Payment[] @relation("PaymentMethodPayments")

  @@index([customerId])
  @@index([stripePaymentMethodId])
  @@map("payment_methods")
}

enum PaymentMethod_Type {
  CARD
  BANK_ACCOUNT
  SEPA_DEBIT
}

model Subscription {
  id                    String              @id @default(cuid())
  customerId            String
  stripeSubscriptionId  String              @unique
  stripePriceId         String?
  status                SubscriptionStatus
  plan                  String
  billingCycle          BillingCycle
  quantity              Int                 @default(1)
  unitAmount            Int
  currency              String              @default("USD")
  currentPeriodStart    DateTime
  currentPeriodEnd      DateTime
  canceledAt            DateTime?
  cancelAtPeriodEnd     Boolean             @default(false)
  trialStart            DateTime?
  trialEnd              DateTime?
  metadata              Json                @default("{}")
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt

  // Relations
  customer              Customer            @relation(fields: [customerId], references: [id], onDelete: Cascade)
  subscriptionItems     SubscriptionItem[]
  invoices              Invoice[]          @relation("SubscriptionInvoices")
  usageRecords          UsageRecord[]      @relation("SubscriptionUsageRecords")

  @@index([customerId])
  @@index([stripeSubscriptionId])
  @@index([status])
  @@map("subscriptions")
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  PAST_DUE
  UNPAID
  TRIALING
  PAUSED
  INCOMPLETE
  INCOMPLETE_EXPIRED
}

enum BillingCycle {
  MONTHLY
  QUARTERLY
  YEARLY
}

model SubscriptionItem {
  id             String       @id @default(cuid())
  subscriptionId String
  stripeItemId   String       @unique
  stripePriceId  String
  priceId        String?      // Legacy field
  quantity       Int          @default(1)
  unitAmount     Int
  currency       String
  usageType      String?      // METERED or LICENSED
  metadata       Json         @default("{}")
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  // Relations
  subscription   Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@index([subscriptionId])
  @@map("subscription_items")
}

model Refund {
  id              String       @id @default(cuid())
  userId          String
  paymentId       String
  stripeRefundId  String       @unique
  amount          Int
  currency        String
  reason          RefundReason?
  status          String       @default("PENDING")
  receiptNumber   String?
  metadata        Json         @default("{}")
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  // Relations
  user            User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  payment         Payment      @relation(fields: [paymentId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([paymentId])
  @@index([stripeRefundId])
  @@map("refunds")
}

enum RefundReason {
  DUPLICATE
  FRAUDULENT
  REQUESTED_BY_CUSTOMER
}

model BillingAddress {
  id         String   @id @default(cuid())
  customerId String   @unique
  line1      String
  line2      String?
  city       String
  state      String?
  postalCode String
  country    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@map("billing_addresses")
}

model Credit {
  id         String   @id @default(cuid())
  customerId String
  balance    Int      @default(0)
  currency   String   @default("USD")
  metadata   Json     @default("{}")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@index([customerId])
  @@map("credits")
}

model UsageLog {
  id           String   @id @default(cuid())
  userId       String
  customerId   String?
  service      String
  endpoint     String
  method       String
  model        String?
  inputTokens  Int?
  outputTokens Int?
  totalTokens  Int      @default(0)
  duration     Int?
  success      Boolean  @default(true)
  errorCode    String?
  errorMessage String?
  ipAddress    String?
  userAgent    String?
  timestamp    DateTime @default(now())
  metadata     Json     @default("{}")

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([customerId])
  @@index([service])
  @@index([timestamp])
  @@map("usage_logs")
}

model FinancialReport {
  id        String       @id @default(cuid())
  type      String
  period    String
  startDate DateTime
  endDate   DateTime
  data      Json
  status    String       @default("PENDING")
  metadata  Json         @default("{}")
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  @@index([type])
  @@index([startDate, endDate])
  @@map("financial_reports")
}

model UsageRecord {
  id                 String   @id @default(cuid())
  subscriptionId     String
  subscriptionItemId String?
  userId             String
  customerId         String
  service            String
  quantity           Int      @default(0)
  model              String?
  inputTokens        Int?
  outputTokens       Int?
  totalTokens        Int      @default(0)
  requestDuration    Int?
  timestamp          DateTime @default(now())
  metadata           Json     @default("{}")
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  // Relations
  subscription       Subscription @relation("SubscriptionUsageRecords", fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@index([subscriptionId])
  @@index([subscriptionItemId])
  @@index([userId])
  @@index([customerId])
  @@index([timestamp])
  @@index([service])
  @@map("usage_records")
}

enum AIService {
  ANTHROPIC
  OPENAI
  GOOGLE
  COHERE
  REPLICATE
  HUGGINGFACE
  MISTRAL
  PERPLEXITY
  OTHER
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expires   DateTime
  createdAt DateTime @default(now())
  
  user      User     @relation("PasswordResetTokens", fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([token])
  @@map("password_reset_tokens")
}

